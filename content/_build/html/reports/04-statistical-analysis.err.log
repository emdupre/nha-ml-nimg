Traceback (most recent call last):
  File "/opt/miniconda3/envs/jbook/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/miniconda3/envs/jbook/lib/python3.9/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/miniconda3/envs/jbook/lib/python3.9/site-packages/jupyter_core/utils/__init__.py", line 166, in wrapped
    return loop.run_until_complete(inner)
  File "/opt/miniconda3/envs/jbook/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/opt/miniconda3/envs/jbook/lib/python3.9/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/opt/miniconda3/envs/jbook/lib/python3.9/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/miniconda3/envs/jbook/lib/python3.9/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from nilearn.glm.first_level import make_first_level_design_matrix

X1 = make_first_level_design_matrix(
    events[0].onset,
    events[0],
    drift_model="cosine",
    high_pass=0.008,
    hrf_model="glover",
)
plotting.plot_design_matrix(X1)
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mKeyError[0m                                  Traceback (most recent call last)
File [0;32m/opt/miniconda3/envs/jbook/lib/python3.9/site-packages/pandas/core/indexes/base.py:3812[0m, in [0;36mIndex.get_loc[0;34m(self, key)[0m
[1;32m   3811[0m [38;5;28;01mtry[39;00m:
[0;32m-> 3812[0m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_engine[49m[38;5;241;43m.[39;49m[43mget_loc[49m[43m([49m[43mcasted_key[49m[43m)[49m
[1;32m   3813[0m [38;5;28;01mexcept[39;00m [38;5;167;01mKeyError[39;00m [38;5;28;01mas[39;00m err:

File [0;32mpandas/_libs/index.pyx:167[0m, in [0;36mpandas._libs.index.IndexEngine.get_loc[0;34m()[0m

File [0;32mpandas/_libs/index.pyx:196[0m, in [0;36mpandas._libs.index.IndexEngine.get_loc[0;34m()[0m

File [0;32mpandas/_libs/hashtable_class_helper.pxi:2606[0m, in [0;36mpandas._libs.hashtable.Int64HashTable.get_item[0;34m()[0m

File [0;32mpandas/_libs/hashtable_class_helper.pxi:2630[0m, in [0;36mpandas._libs.hashtable.Int64HashTable.get_item[0;34m()[0m

[0;31mKeyError[0m: 0

The above exception was the direct cause of the following exception:

[0;31mKeyError[0m                                  Traceback (most recent call last)
Cell [0;32mIn[11], line 3[0m
[1;32m      1[0m [38;5;28;01mfrom[39;00m [38;5;21;01mnilearn[39;00m[38;5;21;01m.[39;00m[38;5;21;01mglm[39;00m[38;5;21;01m.[39;00m[38;5;21;01mfirst_level[39;00m [38;5;28;01mimport[39;00m make_first_level_design_matrix
[0;32m----> 3[0m X1 [38;5;241m=[39m [43mmake_first_level_design_matrix[49m[43m([49m
[1;32m      4[0m [43m    [49m[43mevents[49m[43m[[49m[38;5;241;43m0[39;49m[43m][49m[38;5;241;43m.[39;49m[43monset[49m[43m,[49m
[1;32m      5[0m [43m    [49m[43mevents[49m[43m[[49m[38;5;241;43m0[39;49m[43m][49m[43m,[49m
[1;32m      6[0m [43m    [49m[43mdrift_model[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mcosine[39;49m[38;5;124;43m"[39;49m[43m,[49m
[1;32m      7[0m [43m    [49m[43mhigh_pass[49m[38;5;241;43m=[39;49m[38;5;241;43m0.008[39;49m[43m,[49m
[1;32m      8[0m [43m    [49m[43mhrf_model[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mglover[39;49m[38;5;124;43m"[39;49m[43m,[49m
[1;32m      9[0m [43m)[49m
[1;32m     10[0m plotting[38;5;241m.[39mplot_design_matrix(X1)

File [0;32m/opt/miniconda3/envs/jbook/lib/python3.9/site-packages/nilearn/glm/first_level/design_matrix.py:415[0m, in [0;36mmake_first_level_design_matrix[0;34m(frame_times, events, hrf_model, drift_model, high_pass, drift_order, fir_delays, add_regs, add_reg_names, min_onset, oversampling)[0m
[1;32m    413[0m     [38;5;28;01mif[39;00m [38;5;28misinstance[39m(hrf_model, [38;5;28mstr[39m):
[1;32m    414[0m         hrf_model [38;5;241m=[39m hrf_model[38;5;241m.[39mlower()
[0;32m--> 415[0m     matrix, names [38;5;241m=[39m [43m_convolve_regressors[49m[43m([49m
[1;32m    416[0m [43m        [49m[43mevents[49m[43m,[49m[43m [49m[43mhrf_model[49m[43m,[49m[43m [49m[43mframe_times[49m[43m,[49m[43m [49m[43mfir_delays[49m[43m,[49m[43m [49m[43mmin_onset[49m[43m,[49m[43m [49m[43moversampling[49m
[1;32m    417[0m [43m    [49m[43m)[49m
[1;32m    419[0m [38;5;66;03m# step 2: additional regressors[39;00m
[1;32m    420[0m [38;5;28;01mif[39;00m add_regs [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[1;32m    421[0m     [38;5;66;03m# add user-supplied regressors and corresponding names[39;00m

File [0;32m/opt/miniconda3/envs/jbook/lib/python3.9/site-packages/nilearn/glm/first_level/design_matrix.py:256[0m, in [0;36m_convolve_regressors[0;34m(events, hrf_model, frame_times, fir_delays, min_onset, oversampling)[0m
[1;32m    250[0m condition_mask [38;5;241m=[39m trial_type [38;5;241m==[39m condition
[1;32m    251[0m exp_condition [38;5;241m=[39m (
[1;32m    252[0m     onset[condition_mask],
[1;32m    253[0m     duration[condition_mask],
[1;32m    254[0m     modulation[condition_mask],
[1;32m    255[0m )
[0;32m--> 256[0m reg, names [38;5;241m=[39m [43mcompute_regressor[49m[43m([49m
[1;32m    257[0m [43m    [49m[43mexp_condition[49m[43m,[49m
[1;32m    258[0m [43m    [49m[43mhrf_model[49m[43m,[49m
[1;32m    259[0m [43m    [49m[43mframe_times[49m[43m,[49m
[1;32m    260[0m [43m    [49m[43mcon_id[49m[38;5;241;43m=[39;49m[43mcondition[49m[43m,[49m
[1;32m    261[0m [43m    [49m[43mfir_delays[49m[38;5;241;43m=[39;49m[43mfir_delays[49m[43m,[49m
[1;32m    262[0m [43m    [49m[43moversampling[49m[38;5;241;43m=[39;49m[43moversampling[49m[43m,[49m
[1;32m    263[0m [43m    [49m[43mmin_onset[49m[38;5;241;43m=[39;49m[43mmin_onset[49m[43m,[49m
[1;32m    264[0m [43m[49m[43m)[49m
[1;32m    266[0m regressor_names [38;5;241m+[39m[38;5;241m=[39m names
[1;32m    267[0m [38;5;28;01mif[39;00m regressor_matrix [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:

File [0;32m/opt/miniconda3/envs/jbook/lib/python3.9/site-packages/nilearn/glm/first_level/hemodynamic_models.py:752[0m, in [0;36mcompute_regressor[0;34m(exp_condition, hrf_model, frame_times, con_id, oversampling, fir_delays, min_onset)[0m
[1;32m    750[0m t_r [38;5;241m=[39m _calculate_tr(frame_times)
[1;32m    751[0m [38;5;66;03m# 1. create the high temporal resolution regressor[39;00m
[0;32m--> 752[0m hr_regressor, frame_times_high_res [38;5;241m=[39m [43m_sample_condition[49m[43m([49m
[1;32m    753[0m [43m    [49m[43mexp_condition[49m[43m,[49m[43m [49m[43mframe_times[49m[43m,[49m[43m [49m[43moversampling[49m[43m,[49m[43m [49m[43mmin_onset[49m
[1;32m    754[0m [43m[49m[43m)[49m
[1;32m    756[0m [38;5;66;03m# 2. create the  hrf model(s)[39;00m
[1;32m    757[0m hkernel [38;5;241m=[39m _hrf_kernel(hrf_model, t_r, oversampling, fir_delays)

File [0;32m/opt/miniconda3/envs/jbook/lib/python3.9/site-packages/nilearn/glm/first_level/hemodynamic_models.py:446[0m, in [0;36m_sample_condition[0;34m(exp_condition, frame_times, oversampling, min_onset)[0m
[1;32m    444[0m [38;5;66;03m# Get the condition information[39;00m
[1;32m    445[0m onsets, durations, values [38;5;241m=[39m [38;5;28mtuple[39m([38;5;28mmap[39m(np[38;5;241m.[39masanyarray, exp_condition))
[0;32m--> 446[0m [38;5;28;01mif[39;00m (onsets [38;5;241m<[39m [43mframe_times[49m[43m[[49m[38;5;241;43m0[39;49m[43m][49m [38;5;241m+[39m min_onset)[38;5;241m.[39many():
[1;32m    447[0m     warnings[38;5;241m.[39mwarn(
[1;32m    448[0m         (
[1;32m    449[0m             [38;5;124m"[39m[38;5;124mSome stimulus onsets are earlier [39m[38;5;124m"[39m
[0;32m   (...)[0m
[1;32m    454[0m         stacklevel[38;5;241m=[39mfind_stack_level(),
[1;32m    455[0m     )
[1;32m    457[0m [38;5;66;03m# Set up the regressor timecourse[39;00m

File [0;32m/opt/miniconda3/envs/jbook/lib/python3.9/site-packages/pandas/core/series.py:1130[0m, in [0;36mSeries.__getitem__[0;34m(self, key)[0m
[1;32m   1127[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_values[key]
[1;32m   1129[0m [38;5;28;01melif[39;00m key_is_scalar:
[0;32m-> 1130[0m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_get_value[49m[43m([49m[43mkey[49m[43m)[49m
[1;32m   1132[0m [38;5;66;03m# Convert generator to list before going through hashable part[39;00m
[1;32m   1133[0m [38;5;66;03m# (We will iterate through the generator there to check for slices)[39;00m
[1;32m   1134[0m [38;5;28;01mif[39;00m is_iterator(key):

File [0;32m/opt/miniconda3/envs/jbook/lib/python3.9/site-packages/pandas/core/series.py:1246[0m, in [0;36mSeries._get_value[0;34m(self, label, takeable)[0m
[1;32m   1243[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_values[label]
[1;32m   1245[0m [38;5;66;03m# Similar to Index.get_value, but we do not fall back to positional[39;00m
[0;32m-> 1246[0m loc [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mindex[49m[38;5;241;43m.[39;49m[43mget_loc[49m[43m([49m[43mlabel[49m[43m)[49m
[1;32m   1248[0m [38;5;28;01mif[39;00m is_integer(loc):
[1;32m   1249[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_values[loc]

File [0;32m/opt/miniconda3/envs/jbook/lib/python3.9/site-packages/pandas/core/indexes/base.py:3819[0m, in [0;36mIndex.get_loc[0;34m(self, key)[0m
[1;32m   3814[0m     [38;5;28;01mif[39;00m [38;5;28misinstance[39m(casted_key, [38;5;28mslice[39m) [38;5;129;01mor[39;00m (
[1;32m   3815[0m         [38;5;28misinstance[39m(casted_key, abc[38;5;241m.[39mIterable)
[1;32m   3816[0m         [38;5;129;01mand[39;00m [38;5;28many[39m([38;5;28misinstance[39m(x, [38;5;28mslice[39m) [38;5;28;01mfor[39;00m x [38;5;129;01min[39;00m casted_key)
[1;32m   3817[0m     ):
[1;32m   3818[0m         [38;5;28;01mraise[39;00m InvalidIndexError(key)
[0;32m-> 3819[0m     [38;5;28;01mraise[39;00m [38;5;167;01mKeyError[39;00m(key) [38;5;28;01mfrom[39;00m [38;5;21;01merr[39;00m
[1;32m   3820[0m [38;5;28;01mexcept[39;00m [38;5;167;01mTypeError[39;00m:
[1;32m   3821[0m     [38;5;66;03m# If we have a listlike key, _check_indexing_error will raise[39;00m
[1;32m   3822[0m     [38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise[39;00m
[1;32m   3823[0m     [38;5;66;03m#  the TypeError.[39;00m
[1;32m   3824[0m     [38;5;28mself[39m[38;5;241m.[39m_check_indexing_error(key)

[0;31mKeyError[0m: 0

